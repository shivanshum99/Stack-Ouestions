#include <bits/stdc++.h> 
class NStack
{
    int *a, *top, *next;
    int N;           //no. of stacks
    int S;           //size of main array
    int freespot;//tells free space in main array
public:
    // Initialize your data structure.
    NStack(int _N, int _S):N(_N), S(_S)
    {
        // Write your code here.
        freespot = 0;
        a = new int[S];
        top = new int[N];
        next = new int[S];

        for(int i=0;i<N;i++){
            top[i] = -1;
        }

        for(int i =0;i<S;i++){
            next[i] = i+1;
        }
        next[S-1] = -1;
    }

    // Pushes 'X' into the Mth stack. Returns true if it gets pushed into the stack, and false otherwise.
    bool push(int x, int m)
    {
        // Write your code here. 
        if(freespot == -1){
            return false; // stack overflow;
        }

        //1. find index
        int index = freespot;

        //2. update freespot
        freespot = next[index];

        //3. insert
        a[index] = x;

        //4. update next
        next[index] = top[m-1];

        //5. update top
        top[m-1] = index;

        return true;
    }

    // Pops top element from Mth Stack. Returns -1 if the stack is empty, otherwise returns the popped element.
    int pop(int m)
    {
        // Write your code here.
        if(top[m-1] == -1){
            return -1; //stack underflow
        }
        int index = top[m-1];
        top[m-1] = next[index];
        int poppedElement = a[index];
        next[index] = freespot;
        freespot = index;
        return poppedElement;
    }

    ~NStack(){
        delete[] a;
        delete[] top;
        delete[] next;
    }
};
